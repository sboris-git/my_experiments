pred.w.clim <- predict(lm(y ~ x), new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
f <- funtion(x, a, b) {
a * exp(b *-x)
f <- funtion(x, a, b) {
f <- function(x, a, b) {
a * exp(b *-x)
}
x <- seq(0:100)
y <- f(seq(0:100), 1,1)
qplot(x,y, geom="line")
library(qplot)
plot(x,y, geom="line")
plot(y ~ x, main = "Fitted exponential function", sub = "Blue: fit; green: known")
fit <- nls(y~f(x,a,b,c), data=data.frame(mydata), start=list(a=1, b=30, c=-0.3))
fit <- nls(y~f(x,a,b,c), y, start=list(a=1, b=30, c=-0.3))
y
q()
# Compare a 5 sample averager, an order-5 butterworth lowpass
# filter (cutoff 1/3) and sgolayfilt(x, 3, 5), the best cubic
# estimated from 5 points.
bf <- butter(5,1/3)
x <- c(rep(0,15), rep(10, 10), rep(0, 15))
sg <- sgolayfilt(x)
plot(sg, type="l")
lines(filtfilt(rep(1, 5)/5,1,x), col = "red") # averaging filter
lines(filtfilt(bf,x), col = "blue")           # butterworth
points(x, pch = "x")                          # original data
library(signal)
install.packages("signal")
install.packages("signal")
q()
install.packages("signal")
q()
install.packages("signal")
install.packages("signal")
bf <- butter(5,1/3)
library(signal)
bf <- butter(5,1/3)
x <- c(rep(0,15), rep(10, 10), rep(0, 15))
sg <- sgolayfilt(x)
plot(sg, type="l")
lines(filtfilt(rep(1, 5)/5,1,x), col = "red") # averaging filter
lines(filtfilt(bf,x), col = "blue")           # butterworth
points(x, pch = "x")                          # original data
bf <- butter(5,1/3)
library(signal)
bf <- butter(5,1/3)
x <- c(rep(0,15), rep(10, 10), rep(0, 15))
sg <- sgolayfilt(x)
plot(sg, type="l")
lines(filtfilt(rep(1, 5)/5,1,x), col = "red") # averaging filter
points(x, pch = "x")                          # original data
x
help(attach)
q()
`K4FeCN6.50` <- read.delim("~/Dropbox/Harkot/K4FeCN6-5mM' at GCE/K4FeCN6-50", header=F, dec=",")
View(`K4FeCN6.50`)
attach(`K4FeCN6.50`)
names(`K4FeCN6.50`)
xdata<-V1
ydata<-V2
plot(xdata,ydata)
lines(smooth.spline(xdata,ydata, df=10), col = "red")
plot(xdata,ydata, type = "l")
lines(smooth.spline(xdata,ydata, df=10), col = "red")
plot(xdata,ydata, type = "l", lwd=2, col='red')
lines(smooth.spline(xdata,ydata, df=10), col = "red")
library(stats)
plot(xdata,ydata, type = "l", lwd=2, col='red')
lines(smooth.spline(xdata,ydata, df=10), col = "red")
`K4FeCN6.50` <- read.delim("~/Dropbox/Harkot/K4FeCN6-5mM' at GCE/K4FeCN6-50", header=F, dec=",")
Views(K4FeCN6.50)
Wievs(K4FeCN6.50)
names(K4FeCN6.50)
E<-K4FeCN6.50$V1
i<-K4FeCN6.50$V2
plot(E,i)
install.packages('ggplot2')
library(ggplot2)
qplot(x, y, data='hov.dat')
qplot(x, y, data=`K4FeCN6.50`)
qplot(x, y, data=K4FeCN6.50)
qplot(x, y, data='K4FeCN6.50')
hov.dat<- read.delim("~/Dropbox/Harkot/K4FeCN6-5mM' at GCE/K4FeCN6-50", header=F, dec=",")
qplot(x, y, data='hov.dat')
names(hov,dat)
names(hov.dat)
qplot(V1, V2, data='hov.dat')
clear
clean
hov.dat <-  read.csv('http://www2.ntupsychology.net/seriousstats/hov.csv')
names(hov.dat)
qplot(x, y, data='hov.dat')
with(hov.dat, plot(x, y))
library(ggplot2)
qplot(x, y, data=hov.dat)
q()
source('~/Dropbox/Harkot/R/fit_peak.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
peak
peak$maximum
peak$maximum[1]
peak$maximum[2]
peak[1]$maximum
peak[2]$maximum
source('~/.active-rstudio-document', echo=TRUE)
fix(y)
fix(y.predict)
fix(f)
fix(rhs)
fix(xdata)
fix(peak)
fix(bf)
View(pred.w.clim)
View(pred.w.clim)
View(`K4FeCN6.50`)
View(`K4FeCN6.50`)
View(Dataset)
View(Dataset)
qplot(x, y, data=hov.dat, geom=c(‘point’, ‘smooth’), method=’lm’)
qplot(x, y, data=hov.dat, geom=c('point', 'smooth'), method='lm')
library(ggplot2)
qplot(x, y, data=hov.dat, geom=c('point', 'smooth'), method='lm')
qplot(x, y, data=hov.dat, geom=c('point', 'smooth'), method='lm')
source('~/Dropbox/Harkot/R/fit_peak_1.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Harkot/R/fit_peak_1.R', echo=TRUE)
y.loess <- loess(y ~ x, span=spanlist[2], data.frame(x=x, y=y)) # for CV span = 0,25
source('~/Dropbox/Harkot/R/fit_peak_2.R', echo=TRUE)
cbind(CV.freq)
curve(100*fsp(x,deriv=1), add=T, lty="dashed")
curve(10000*fsp(x,deriv=2)+100, add=T, lty="dotted")
#hist(100*fsp(x,deriv=1))
#legend("bottomright", legend = c("data", "filtfilt", "filter", "sg"), pch = 1, col = c("black", "red", "blue", 'green'), bty = "n")
legend (-400,300,
c(paste("span=", formatC(spanlist[2], digits=2, format="f"))),
lty=1, col=1:length(spanlist), bty="n")
CV.freq
CV.cut
hist(100*fsp(x,deriv=1))
gate
breaks
breaks <- seq(gate[1], gate[2], by=step<-(gate[2]-gate[1])/10)    # sequence
CV.cut <- cut(y.predict, breaks, right=FALSE)
CV.freq = table(CV.cut)
breaks
CV.cut
CV.freq
source('~/Dropbox/Harkot/R/fit_peak_2.R', echo=TRUE)
CV.cut
breaks
CV.freq
source('~/.active-rstudio-document', echo=TRUE)
require(stats)
sale5 <- c(6, 4, 9, 7, 6, 12, 8, 10, 9, 13)
plot(sale5)
abline(lsfit(1:10, sale5))
abline(lsfit(1:10, sale5, intercept = FALSE), col = 4) # less fitting
z <- lm(dist ~ speed, data = cars)
plot(cars)
abline(z)
abline(coef = coef(z))
abline(mC <- lm(dist ~ 1, data = cars)) ## the same as
abline(a = coef(mC), b = 0, col = "blue")
abline(coef = coef(z))
plot(sale5)
plot(cars)
abline(mC <- lm(dist ~ speed, data = cars)) ## the same as
abline(a = coef(mC), b = 0, col = "blue")
require(lattice)
require(reshape)
source('~/Dropbox/Harkot/R/Peak_Finder/peak.R', echo=TRUE)
source('~/Dropbox/Harkot/R/PeakFinder/peak.R', echo=TRUE)
h1 <- read.delim("~/Dropbox/Harkot/R/PeakFind/tioga1_0-8.csv", header=FALSE, dec=",")
h1 <- read.delim("~/home/stable/Dropbox/Harkot/R/PeakFinder/tioga1_0-8.csv", header=FALSE, dec=",")
h1 <- read.delim("~/home/stable/Dropbox/Harkot/R/PeakFinder/tioga1_0-8.csv", header=FALSE, dec=",")
h1 <- read.delim("/home/stable/Dropbox/Harkot/R/PeakFinder/tioga1_0-8.csv", header=FALSE, dec=",")
q()
install.package("rpanel")
install.packages("rpanel")
install.packages("tcltk")
if(!require(installr)) {
install.packages("installr");}
install.packages("installr")
install.packages("BWidget")
q()
acq.freq <- 100                    # data acquisition (sample) frequency (Hz)
time     <- 6                      # measuring time interval (seconds)
ts       <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
f.0 <- 1/time
dc.component <- 1
component.freqs <- c(3,7,10)        # frequency of signal components (Hz)
component.delay <- c(0,0,0)         # delay of signal components (radians)
component.strength <- c(1.5,.5,.75) # strength of signal components
f   <- function(t,w) {
dc.component +
sum( component.strength * sin(component.freqs*w*t + component.delay))
}
plot.fourier(f,f.0,ts=ts)
library(stats)
acq.freq <- 100                    # data acquisition (sample) frequency (Hz)
time     <- 6                      # measuring time interval (seconds)
ts       <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
f.0 <- 1/time
dc.component <- 1
component.freqs <- c(3,7,10)        # frequency of signal components (Hz)
component.delay <- c(0,0,0)         # delay of signal components (radians)
component.strength <- c(1.5,.5,.75) # strength of signal components
f   <- function(t,w) {
dc.component +
sum( component.strength * sin(component.freqs*w*t + component.delay))
}
plot.fourier(f,f.0,ts=ts)
plot.fourier <- function(fourier.series, f.0, ts) {
w <- 2*pi*f.0
trajectory <- sapply(ts, function(t) fourier.series(t,w))
plot(ts, trajectory, type="l", xlab="time", ylab="f(t)"); abline(h=0,lty=3)
}
acq.freq <- 100                    # data acquisition (sample) frequency (Hz)
time     <- 6                      # measuring time interval (seconds)
ts       <- seq(0,time-1/acq.freq,1/acq.freq) # vector of sampling time-points (s)
f.0 <- 1/time
dc.component <- 1
component.freqs <- c(3,7,10)        # frequency of signal components (Hz)
component.delay <- c(0,0,0)         # delay of signal components (radians)
component.strength <- c(1.5,.5,.75) # strength of signal components
f   <- function(t,w) {
dc.component +
sum( component.strength * sin(component.freqs*w*t + component.delay))
}
plot.fourier(f,f.0,ts=ts)
source('~/Dropbox/DataProcessing/R_FFT/FFT.R', echo=TRUE)
install.packages("Cairo")
source('~/Dropbox/DataProcessing/R_FFT/FFT.R', echo=TRUE)
source('~/Dropbox/DataProcessing/R_FFT/FFT.R', echo=TRUE)
source('~/Dropbox/DataProcessing/R_FFT/FFT.R', echo=TRUE)
plot(0,0,col="#00000000",ylim=c(29.8,32.2), xlim=c(0,0.05),xlab="X",ylab="Y",main="Complex function example")
lines(sample.t, sample.v, lwd=2, col=heat.colors(32)[15])
plot(sample.f[2:length(sample.f)], Mod(sample.fft)[2:length(Mod(sample.fft))]/length(Mod(sample.fft)), xlim=c(-300,300), type='o', lwd=2,
col=heat.colors(32)[15], xlab="Frequency, Hertz", ylab="Power", main="Simple spectral analysis")
source('~/Dropbox/DataProcessing/R_FFT/FFT.R', echo=TRUE)
source('~/Dropbox/DataProcessing/R_FFT/FFT.R', echo=TRUE)
source('~/Dropbox/Harkot/R/fit_peak_2.R', echo=TRUE)
install.packages("AUC")
q()
install.packages("MESS")
install.packages("quadprog")
install.packages("MESS")
install.packages("mvtnorm")
install.packages("MESS")
q()
install.packages("PK")
install.packages("dplyr")
install.packages("zoo")
q()
install.packages("signal")
install.packages("quantmod")
install.packages("MESS")
install.packages("quadprog")
install.packages("MESS")
install.packages("mvtnorm")
install.packages("MESS")
install.packages("bioconductor")
source("http://bioconductor.org/biocLite.R")
biocLite("chimera")
warnings()
q()
Rcmdr base
Rcmdr
library(Rcmdr)
Rcmdr
q()
install.packages(c("iqspr", "gridExtra"))
install.packages("iqspr")
library(iqspr)
install.packages("iqspr")
install.packages("devtools")
library(devtools)
install.packages("iqspr")
install_github("GLambard/inverse-molecular-design",subdir="iqspr")
install_version("iqspr", version="2.3", repos="http://cran.us.r-project.org")
# https://www.r-bloggers.com/multilabel-classification-with-neuralnet-package/
# load libs
require(neuralnet)
source('~/Documents/R/AI/Test-1-wine.R', echo=TRUE)
source('~/Documents/R/AI/Test-1-wine.R', echo=TRUE)
str(wines)
plt2
source('~/Documents/R/AI/Test-1-wine.R', echo=TRUE)
source('~/Documents/R/AI/Test-iris.R', echo=TRUE)
source('~/Documents/R/AI/Test-iris.R', echo=TRUE)
source('~/Documents/R/AI/Test-iris.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/R/AI/Test-IRIS.R', echo=TRUE)
source('~/Documents/R/AI/Test-iris-NNet.R', echo=TRUE)
source('~/Documents/R/AI/Test-1-wine.R', echo=TRUE)
plt1
source('~/Documents/R/AI/Test-iris.R', echo=TRUE)
source('~/Documents/R/AI/Test-boston-crime.R', echo=TRUE)
source('~/Documents/R/AI/Test-iris-NNet.R', echo=TRUE)
irisdata
source('~/Documents/R/AI/Test-1-wine.R', echo=TRUE)
names(wines) <- c("label",
"Alcohol",
"Malic_acid",
"Ash",
"Alcalinity_of_ash",
"Magnesium",
"Total_phenols",
"Flavanoids",
"Nonflavanoid_phenols",
"Proanthocyanins",
"Color_intensity",
"Hue",
"OD280_OD315_of_diluted_wines",
"Proline")
lenght(wines)
wines
wines[107]
wines[107:1]
library(devtools)
install_github("ropensci/webchem")
install.packages('dplyr', dep = TRUE)
install.packages("devtools")
install.packages("devtools")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("hadley/lazyeval")
devtools::install_github("hadley/dplyr")
library(devtools)
install_github("ropensci/webchem")
library(ropensci/webchem)
pc_synonyms('Aspirin')
pc_synonyms(c('Aspirin', 'Triclosan'))
pc_synonyms(5564, from = 'cid')
pc_synonyms(c('Aspirin', 'Triclosan'), interactive = 10)
library(ropensci/webchem)
# https://rdrr.io/github/ropensci/webchem/man/pc_synonyms.html
pc_synonyms('Aspirin')
library(webchem)
# https://rdrr.io/github/ropensci/webchem/man/pc_synonyms.html
pc_synonyms('aniline')
#Retrieve Indentifiers from wikidata https://rdrr.io/github/ropensci/webchem/man/wd_ident.html#heading-1
## Not run:
id <- c("Q408646", "Q18216")
wd_ident(id)
'
# https://rdrr.io/github/ropensci/webchem/man/pc_synonyms.html
pc_synonyms('C[C](C)C(=O)OC')
getwd()
getwd()
library(signal)
require(signal)
install.packages("signal")
spanlist <- c(0.10, 0.20)
y.loess <- loess(y ~ x, span=spanlist[2], data.frame(x=x, y=y)) # for CV span = 0,25
source('~/Dropbox/DataProcessing/CV/fit_peak_2.R', echo=TRUE)
source('~/Dropbox/DataProcessing/CV/fit_peak_2.R', echo=TRUE)
source('~/Dropbox/DataProcessing/CV/fit_peak_2.R', echo=TRUE)
source('~/Dropbox/DataProcessing/CV/peak.R', echo=TRUE)
source('~/Dropbox/DataProcessing/CV/fit_peak_2.R', echo=TRUE)
install.packages("ggplot")
install.packages("ggplot2")
install.packages("scales")
install.packages("gridExtra")
install.packages("neuralnet")
q()
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
source('~/Dropbox/Students/2019/Demyanuk/Dataprocessing/tea_lda_csv2.R', echo=TRUE)
# install.packages("devtools", dependencies = TRUE)
# library(devtools)
# install_github("vqv/ggbiplot", force = TRUE)
library(ggbiplot)
datafile = "Tea_db_PCA_doubled_rnd.csv" #Tea_db_PCA_Ox.csv
getwd()
setwd("//home/stable/Dropbox/Students/2019/Demyanuk/Dataprocessing")
data <- read.table(datafile, header=TRUE, sep=";", dec=",")
data.species <- data[, 4]
#params <- log(data[, 5:15])
params <- data[, 5:15]
pairs(params)
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
params.pca <- prcomp(params,
center = TRUE,
scale = TRUE)
# print method
print(params.pca)
# plot method
# plot method
plot(params.pca, type = "l")
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
params.pca <- prcomp(params,
center = TRUE,
scale = TRUE)
# print method
print(params.pca)
# plot method
plot(params.pca, type = "l")
# summary method
PC1<-params.pca$rotation[1]
PC2<-params.pca$rotation[2]
summary(params.pca)
# print method
print(params.pca)
# install.packages("devtools", dependencies = TRUE)
# library(devtools)
# install_github("vqv/ggbiplot", force = TRUE)
library(ggbiplot)
datafile = "Tea_db_PCA_doubled_rnd.csv" #Tea_db_PCA_Ox.csv
getwd()
setwd("//home/stable/Dropbox/Students/2019/Demyanuk/Dataprocessing")
data <- read.table(datafile, header=TRUE, sep=";", dec=",")
data.species <- data[, 4]
#params <- log(data[, 5:15])
params <- data[, 5:15]
pairs(params)
# apply PCA - scale. = TRUE is highly
# advisable, but default is FALSE.
params.pca <- prcomp(params,
center = TRUE,
scale = TRUE)
# print method
print(params.pca)
# plot method
# plot method
plot(params.pca, type = "l")
# We can use the predict function if we observe new data and want to predict their PCs values. Just for illustration pretend the last two rows of the iris data has just arrived and we want to see what is their PCs values:
# Predict PCs
predict(params.pca, newdata=tail(params, 2))
# We can use the predict function if we observe new data and want to predict their PCs values. Just for illustration pretend the last two rows of the iris data has just arrived and we want to see what is their PCs values:
# Predict PCs
predict(params.pca, newdata=tail(params, 2))
summary(params.pca)
# We can use the predict function if we observe new data and want to predict their PCs values. Just for illustration pretend the last two rows of the iris data has just arrived and we want to see what is their PCs values:
# Predict PCs
predict(params.pca, newdata=tail(params, 2))
g <- ggbiplot(params.pca, choices = 1:2, obs.scale = 1,
var.scale = 1,
varname.size = 4,
labels.size = 3, # points label by data value
labels = row.names(data[1:69,]),
groups = data.species,
ellipse = TRUE,
circle = TRUE,
circle.prob = 0.95)
g <- g + scale_color_manual(name="e-tongue", values=c("green","yellow","brown","blue","red"))
# https://www3.nd.edu/~steve/computing_with_data/12_Scales_themes/scales_themes.html
# http://docs.ggplot2.org/dev/vignettes/themes.html
g <- g + theme(axis.title.x = element_text(face="bold", colour="black", size=15),
axis.text.x  = element_text(angle=0, vjust=0.5, size=16),
axis.title.y = element_text(face="bold", colour="black", size=15),
axis.text.y  = element_text(angle=0, vjust=0.5, size=16))
# http://sape.inf.usi.ch/quick-reference/ggplot2/themes
g <- g + theme(legend.direction = 'vertical', legend.position = 'right') +
theme(legend.title = element_text(face = "italic", size = 15, angle = 0, color = "black") ) +
theme(legend.text = element_text(colour="black", size=12, face="bold"))
print(g)
